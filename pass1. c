//pass1 assembler
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main() {
    FILE *f1, *f2, *f3, *f4;
    char s[100], lab[30], opcode[30], opa[30], opcode1[30], opa1[30];
    int locctr = 0, x = 0, start = 0, length = 0;

    f1 = fopen("input.txt", "r");
    f2 = fopen("opcode.txt", "r");
    f3 = fopen("output.txt", "w");
    f4 = fopen("symtab.txt", "w");

    while (fscanf(f1, "%s%s%s", lab, opcode, opa) != EOF) {
        if (strcmp(opcode, "END") == 0) {
            break;
        }
        if (strcmp(opcode, "START") == 0) {
            fprintf(f3, "t%s\t%s\t%s", lab, opcode, opa);
            sscanf(opa, "%x", &locctr);
            start = locctr;
        }
        else {
            rewind(f2);
            x = 0;
            while (fscanf(f2, "%s%s", opcode1, opa1) != EOF) {
                if (strcmp(opcode, opcode1) == 0) {
                    x = 1;
                }
            }
            if (x == 1) {
                fprintf(f3, "\n%x\t%s\t%s\t%s", locctr, lab, opcode, opa);
                locctr += 3;
            }
            else {
                fprintf(f3, "\n%x\t%s\t%s", locctr, lab, opa);
                if (strcmp(opcode, "RESW") == 0) {
                    locctr += 3 * atoi(opa);
                }
                else if (strcmp(opcode, "WORD") == 0) {
                    locctr += 3;
                }
                else if (strcmp(opcode, "BYTE") == 0) {
                    locctr += (len + 1) / 2;
                }
                else {
                    locctr += 1;
                }
            }
        }
    }

    length = locctr - start;
    printf("\nProgram Length: %x\n", length);

    fclose(f1);
    fclose(f2);
    fclose(f3);
    fclose(f4);

    printf("\n-- output.txt --\n");
    f3 = fopen("output.txt", "r");
    while (fgets(s, sizeof(s), f3) != NULL)
        printf("%s", s);
    fclose(f3);

    printf("\n-- symtab.txt --\n");
    f4 = fopen("symtab.txt", "r");
    while (fgets(s, sizeof(s), f4) != NULL)
        printf("%s", s);
    fclose(f4);

    return 0;
}
